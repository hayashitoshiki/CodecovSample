name: Check pull request

on: pull_request

env:
  # 実行する Gradle コマンド(今回は最小限にUnit Testのみ)
  GRADLE_UNIT_TEST_TASK: 'test --stacktrace'

jobs:
  test:
    # runs-on: ubuntu-latest
    runs-on: macos-latest
    strategy:
      matrix:
        api-level: [29]
        target: [default]
    steps:
    # チェックアウト
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # JDKのセットアップ
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    # Gradleのキャッシュ復元
    - uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    # 依存関係の出力
    - name: Displays the Android dependencies of the project
      run: ./gradlew androidDependencies

    # エミュレータ立ち上げ
#     - name: run Android Emulater stand tests
#       uses: reactivecircus/android-emulator-runner@v2
#       with:
#         api-level: 29
#         arch: x86_64
#         script: ./gradlew app:connectedDebugAndroidTest --stacktrace

    # コンパイル
    - name: Run Compile
      run: ./gradlew assembleDebug

    # テスト
    - name: Test with Gradle
      run: ./gradlew test --stacktrace

    # コードカバレッジをJaCoCo形式で取得
    - name: Get code coverage for JaCoCo
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 29
        arch: x86_64
        script: ./gradlew jacocoTestReports

    # コードカバレッジをCodecovへアップロード
    - name: Upload code coverage to Codecov
      run: bash <(curl -s https://codecov.io/bash)
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    # テスト結果とコードカバレッジのアップロード
    - name: Upload test results and code coverage Artifact
      uses: actions/upload-artifact@v2
      if: success() || failure()
      with:
        name: results
        path: |
          **/build/reports/tests/**/*
          **/build/reports/test-results/**/*
          **/build/reports/jacoco/**/*
        if-no-files-found: warn
        retention-days: 14
