// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.kotlin_version = "1.5.0"
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:4.2.1"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        jcenter() // Warning: this repository is going to shut down soon
    }
}

subprojects {
    switch (project.name) {
        case 'app':
            apply plugin: 'com.android.application'
            break
        default:
            apply plugin: 'com.android.library'
            break
    }
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-kapt'

    android {
        compileSdkVersion 30
        buildToolsVersion "30.0.3"

        defaultConfig {
            applicationId "com.example.codecovsample"
            minSdkVersion 26
            targetSdkVersion 30
            versionCode 1
            versionName "1.0"

            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            }
            debug {
                testCoverageEnabled true
            }
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
        kotlinOptions {
            jvmTarget = '1.8'
        }
        buildFeatures {
            dataBinding true
            viewBinding true
        }
        lintOptions {
            checkReleaseBuilds false
            // Or, if you prefer, you can continue to check for errors in release builds,
            // but continue the build even when errors are found:
            abortOnError false
            xmlReport true
        }
    }
    configurations { ktlint }

    afterEvaluate {
        check.dependsOn ktlint
    }
    dependencies {
        // ktlint
        ktlint "com.pinterest:ktlint:0.41.0"
    }


    task ktlint(type: JavaExec, group: "verification") {
        description = "Check Kotlin code style."
        main = "com.pinterest.ktlint.Main"
        classpath = configurations.ktlint
        args "--android", "--color", "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/reports/ktlint-results.xml", "src/**/*.kt"
        ignoreExitValue true
    }

    task ktlintFormat(type: JavaExec, group: "formatting") {
        description = "Fix Kotlin code style deviations."
        main = "com.pinterest.ktlint.Main"
        classpath = configurations.ktlint
        args "-F", "--android", "src/**/*.kt"
        ignoreExitValue true
    }
}

apply plugin: "jacoco"

jacoco {
    toolVersion = "0.8.7"
}

// 全プロジェクトのカバレッジ取得
task jacocoMergeReports(type: JacocoMerge) {
    group = 'verification'
    description = "Merge all JaCoCo reports from projects into one."

    gradle.afterProject { p, state ->
        if (p.rootProject != p && p.plugins.hasPlugin('jacoco')) {
            if (p.name != "document" && p.name != "CodecovSample") {
                dependsOn "${p.path}:jacocoDebugTestReport"
//                dependsOn "${p.path}:createDebugCoverageReport"
//                dependsOn "${p.path}:testDebugUnitTest"
                executionData "${p.buildDir}/jacoco/testDebugUnitTest.exec"
            }
        }
    }
}

// マージされたカバレッジ取得
task jacocoTestReports(type: JacocoReport, dependsOn: 'jacocoMergeReports') {
    group = 'verification'
    description = "Generate Jacoco coverage reports for the build. Only unit tests."

    executionData jacocoMergeReports.destinationFile

    getSourceDirectories().setFrom(files())
    getClassDirectories().setFrom(files())

    gradle.afterProject { p, state ->
        if (p.rootProject != p && p.plugins.hasPlugin('jacoco')) {
            if (p.name != "document" && p.name != "ChatMemo") {
                getSourceDirectories().from += "${p.projectDir}/src/main/java"
                getClassDirectories().from += p.fileTree(dir: "${p.buildDir}/tmp/kotlin-classes/debug")
                getExecutionData().setFrom(fileTree(dir: project.projectDir, includes: [
                        '**/*.exec',    //JUnit Test Result
                        '**/*.ec'])     //Espresso Test Result
                )
            }
        }
    }

    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}